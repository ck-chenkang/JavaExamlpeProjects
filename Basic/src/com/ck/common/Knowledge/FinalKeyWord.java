package com.ck.common.Knowledge;

// final 关键字
// 参考链接：https://www.huaweicloud.com/articles/53e32a042c232632e1e1e4ac343bc016.html
public class FinalKeyWord {
    public static void main(String[] args) {
        /**
         *final关键字
         * 单词含义：最终的，最后的，表示不能再改变的。
         *
         * final关键字：可以修饰类、方法、变量
         *
         * 修饰类：
         *
         * 表示一个最终类，表示不能有子类，【不能被其他类继承】
         *
         * 一旦一个类型不能被继承，那么其中所有的方法都不能被重写
         *
         * 不影响当前类的方法被调用
         *
         * 修饰方法：
         *
         * 表示一个最终方法，【该方法不能被重写】
         *
         * 修饰变量：
         *
         * 表示一个最终变量，该【变量变成了常量】，就只能赋值一次
         *
         * 当前项目中，常用的常量一般都定义在一个类的成员位置，甚至专门定义一个常量类
         *
         * 定义常量的好处：见名知意，容易理解；可维护性高
         *
         * 代码演示（都在注释里了）：
         *
         * class YE{
         * 	public final void  show() {
         * 		System.out.println("我是爷爷");
         *        }
         * }
         * class FU extends YE{
         * //	public void show() { //这里就会报错，提示不能被继承
         * //		System.out.println("我是爷爷的儿子");
         * //	}
         * 	public void show1() {
         * 		System.out.println("我是爸爸");
         *    }
         * }
         * 输出结果：
         *
         * 我是爷爷
         * 我是叔叔，我还要攒钱娶媳妇，不能被其他人继承
         *
         *
         * Final修饰成员变量的注意事项
         * 1.final修饰成员变量，该成员变量必须在创建对象之前进行赋值，否则编译失败
         * 2.final修饰成员变量，固定的不是成员变量拥有的默认值，如果固定的是默认值，那么将导致被final修饰的成员变量的值永远无法修改，
         * 只能是默认值，这也不符合语法规则
         * 对被final修饰的成员变量的赋值有两种实现方式：
         * 定义成员变量的时候手动赋值
         * 利用构造器对成员变量进行赋值
         *
         * 3为什么不行？
         *
         * 解释：如1所描述，被final修饰的成员变量必须在对象创建之前进行赋值，如果方法3可以，
         * 那么我们知道对象创建后，才能调用方法3，也就是说成员变量利用方法3进行赋值，会导致成员变量的赋值发生在对象创建之后
         *
         * 5.为什么被Final修饰的成员变量必须在对象创建之前进行赋值？
         *
         * 理解：被final关键字修饰的东西有一个特点，那就是一旦被修饰，那么它的值也就终生不变，可见final关键字起到了固定的作用，既然起到固定那么，你就要提前告诉final固定的是谁，如果允许被final修饰的成员变量赋值发生在对象创建之后，那么对象创建完成后final固定的值还是未可知的
         *
         *   6.final修饰成员变量和final修饰局部变量的区别与联系：
         *
         * ①被final修饰的成员变量与局部变量均具有：一旦赋值，该值就终身不变
         *
         * ②被final修饰的成员变量必须要在创建对象之前进行赋值，否则会编译失败，
         *
         * ③但是局部变量可以不赋值，但是没有被赋值的局部变量不能够被使用，一旦被使用就会编译失败
         *
         *  .综上：一旦决定使用final关键字来修饰成员变量或者局部变量，一定要做到提前赋值
         */


    }
}
