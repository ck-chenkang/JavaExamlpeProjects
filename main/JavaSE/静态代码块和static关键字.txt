参考链接：https://www.cnblogs.com/luoyanli/archive/2012/12/04/2800758.html

Java没有全局变量的概念，用static修饰的方法和成员变量，不需要实例化对象出来，就可以使用，通过类名点xx。

1、static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：
类名.静态方法名(参数列表...)
类名.静态变量名

2、用static修饰的代码块称为静态代码块
    当类被加载的时候，就会运行，列如，没当实例化一个对象的时候，静态代码块，就会优先于非静态代码块先执行。

    可以有多个，位置随便放，不在任何方法体内。
    在类加载的时候，会执行这些代码块，如果static代码块有多个，就会按照它们在类中的出现顺序，依次执行。
    每个代码块，只会执行一次，在创建新的实例的时候，不会执行。


    public class Test5 {
        private static int a;
        private int b;

        static{
        Test5.a=3;
        System.out.println(a);
        Test5 t=new Test5();
        t.f();
        t.b=1000;
        System.out.println(t.b);
        }

        static{
        Test5.a=4;
        System.out.println(a);
        }

        public static void main(String[] args) {
        // TODO 自动生成方法存根
        }

        static{
        Test5.a=5;
        System.out.println(a);
        }

        public void f(){
        System.out.println("hhahhahah");
        }
    }
执行结果：
    3
    hhahhahah
    1000
    4
    5

静态代码有什么用：
    类加载的时候就会去执行静态代码块的内容。
    比如说：写连接数据库的那些内容时，经常有classforName("XXX"),
    用于加载一些东西，这些东西就可以写在静态代码块中。还有一些，你想让类加载时就执行的程序也可以放在里面。

    Java静态代码块的作用：Java静态代码块中的代码会在类加载JVM时运行，且只被执行一次，
    也就是说这些代码不需要实例化类就能够被调用。一般情况下,如果有些代码必须在项目启动的时候就执行的时候,就需要使用静态代码块。

3、静态变量和实例变量的区别：
    用static修饰的变量，叫做静态变量，没有用static修饰的变量叫实例变量。
    区别：
        静态变量，在内存中只有一份拷贝，推荐使用类名访问，不推荐使用对象访问。
        实例变量：每创建一个变量，就会为变量分配一次内存，不同对象的实例变量互不影响。

4、静态方法：
    通过类名访问，任何实例也可以调用，静态方法内部不能出现this和super关键字，不能访问所属类的实例变量和实例方法（就是不带static的成员变量和成员方法）；
    只能所属类的访问静态变量和静态方法。

5、static和final一起用表示什么：
    修饰变量的时候，可简单的称之为"全局常量"，
    对于变量，表示，一旦给值，就不可以修改，而且可以通过类名直接访问。
    对于方法，表示不可覆盖，可以通过类名直接访问。


疑惑归纳：
    1、static修饰的变量可以被继承吗？
    答案：可以被继承，也可以被修改
    1）创建Person类
        package com.ck.main;

        public class Person {
            static String name;

            public Person() {
                Person.name = "爸爸的名字";
                System.out.println(Person.name);
            }
        }
    2）创建Student类，并继承Person类
        package com.ck.main;

        public class Student  extends Person{
            static String name;

            public Student() {
                Student.name = "儿子的名字";
                System.out.println(Student.name);
            }

            public static void main(String[] args) {
                Student student = new Student();

                System.out.println(Student.name);
            }
        }
    3）输出结果：
        爸爸的名字
        儿子的名字
        儿子的名字



